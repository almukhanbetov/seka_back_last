package handlers

import (
	"fmt"
	"io"
	"log"
	"net/mail"
	"os"
	"seka_back_last/db"
	"seka_back_last/models"
	"strconv"
	"strings"
	"time"

	"github.com/gin-gonic/gin"
)

// ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è
func CreateDriver(c *gin.Context) {
	log.Println("üì§ –ü—Ä–∏—à—ë–ª POST /api/driver")

	name := c.PostForm("name")
	email := c.PostForm("email")

	if name == "" {
		c.JSON(400, gin.H{"error": "–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"})
		return
	}

	if email != "" {
		if _, err := mail.ParseAddress(email); err != nil {
			c.JSON(400, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email"})
			return
		}
	}

	var imagePath string
	file, header, err := c.Request.FormFile("photo")
	if err != nil {
		log.Printf("üìé –§–æ—Ç–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –±—É–¥–µ—Ç –¥–µ—Ñ–æ–ª—Ç: %v", err)
		imagePath = "uploads/no-image.png"
	} else {
		filename := fmt.Sprintf("uploads/%d_%s", time.Now().Unix(), header.Filename)

		if _, err := os.Stat("uploads"); os.IsNotExist(err) {
			if err := os.Mkdir("uploads", os.ModePerm); err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ uploads: %v", err)
				c.JSON(500, gin.H{"error": "–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø–∞–ø–∫–∏"})
				return
			}
		}

		out, err := os.Create(filename)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
			c.JSON(500, gin.H{"error": "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ"})
			return
		}
		defer out.Close()

		if _, err := io.Copy(out, file); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
			c.JSON(500, gin.H{"error": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"})
			return
		}

		imagePath = filename
	}

	var driverID int
	err = db.DB.QueryRow(`
		INSERT INTO users (name, email, image)
		VALUES ($1, $2, $3)
		RETURNING id
	`, name, email, imagePath).Scan(&driverID)

	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: %v", err)
		if strings.Contains(err.Error(), "users_email_key") {
			c.JSON(400, gin.H{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"})
			return
		}
		c.JSON(500, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è"})
		return
	}

	c.JSON(200, gin.H{
		"message":   "‚úÖ –í–æ–¥–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω",
		"driver_id": driverID,
	})
}

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
func GetDrivers(c *gin.Context) {
	var drivers []models.Driver

	err := db.DB.Select(&drivers, `SELECT id, name, email, image, status FROM users ORDER BY id`)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–π: %v", err)
		c.JSON(500, gin.H{"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–π"})
		return
	}

	c.JSON(200, gin.H{
		"drivers": drivers,
	})
}


// ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è
func UpdateDriver(c *gin.Context) {
	idParam := c.Param("id")
	driverID, err := strconv.Atoi(idParam)
	if err != nil {
		c.JSON(400, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤–æ–¥–∏—Ç–µ–ª—è"})
		return
	}

	name := c.PostForm("name")
	email := c.PostForm("email")

	if name == "" {
		c.JSON(400, gin.H{"error": "–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"})
		return
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è email, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
	if email != "" {
		if _, err := mail.ParseAddress(email); err != nil {
			c.JSON(400, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email"})
			return
		}
	}

	// –§–æ—Ç–æ, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è
	imagePath := ""
	file, header, err := c.Request.FormFile("photo")
	if err == nil {
		filename := fmt.Sprintf("uploads/%d_%s", time.Now().Unix(), header.Filename)

		if _, err := os.Stat("uploads"); os.IsNotExist(err) {
			if err := os.Mkdir("uploads", os.ModePerm); err != nil {
				c.JSON(500, gin.H{"error": "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏"})
				return
			}
		}

		out, err := os.Create(filename)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: %v", err)
			c.JSON(500, gin.H{"error": "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"})
			return
		}
		defer out.Close()

		if _, err := io.Copy(out, file); err != nil {
			c.JSON(500, gin.H{"error": "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"})
			return
		}
		imagePath = filename
	}

	// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
	var query string
	var args []interface{}

	if imagePath != "" {
		query = `
			UPDATE users SET name = $1, email = $2, image = $3 WHERE id = $4
		`
		args = []interface{}{name, email, imagePath, driverID}
	} else {
		query = `
			UPDATE users SET name = $1, email = $2 WHERE id = $3
		`
		args = []interface{}{name, email, driverID}
	}

	res, err := db.DB.Exec(query, args...)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: %v", err)

		if strings.Contains(err.Error(), "users_email_key") {
			c.JSON(400, gin.H{"error": "Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"})
			return
		}

		c.JSON(500, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è"})
		return
	}

	count, _ := res.RowsAffected()
	if count == 0 {
		c.JSON(404, gin.H{"error": "–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}

	c.JSON(200, gin.H{"message": "‚úÖ –í–æ–¥–∏—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω"})
}

func AssignCarToDriver(c *gin.Context) {
	var req struct {
		DriverID int   `json:"driver_id"`
		CarIDs   []int `json:"car_ids"`
	}
	if err := c.BindJSON(&req); err != nil || req.DriverID == 0 || len(req.CarIDs) == 0 {
		c.JSON(400, gin.H{"error": "driver_id –∏ car_ids –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"})
		return
	}

	// –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏–º –≤—Å–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
	_, _ = db.DB.Exec(`DELETE FROM driver_car WHERE driver_id = $1`, req.DriverID)

	// –í—Å—Ç–∞–≤–∏–º –Ω–æ–≤—ã–µ
	for _, carID := range req.CarIDs {
		_, err := db.DB.Exec(`INSERT INTO driver_car (driver_id, car_id) VALUES ($1, $2)`, req.DriverID, carID)
		if err != nil {
			c.JSON(500, gin.H{"error": "–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω—ã"})
			return
		}
	}

	c.JSON(200, gin.H{"message": "–ú–∞—à–∏–Ω—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –≤–æ–¥–∏—Ç–µ–ª—é"})
}
